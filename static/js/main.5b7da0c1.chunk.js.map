{"version":3,"sources":["component/card.js","component/CardList.js","component/searchBox.js","component/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","card","i","key","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","padding","children","App","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filterRobot","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4NAmBgBA,EAhBJ,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAExB,OAEA,yBAAKC,UAAU,uDAEd,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,WAEzD,6BACC,4BAAML,GACN,2BAAIC,EAAJ,QCAYK,EATA,SAAC,GAEf,OAF0B,EAAVC,OAEDC,KAAI,SAACC,EAAKC,GAClB,OAAQ,kBAAC,EAAD,CAAMC,IAAKF,EAAKP,GACrBA,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,YCIRW,EAZC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACC,yBAAKV,UAAU,OACb,2BAAOA,UAAU,2CAChBW,KAAK,OACLC,YAAY,eACZC,SAAUH,MCIAI,G,MATF,SAACC,GAEb,OACD,yBAAKC,MAAO,CAACC,UAAW,SAASC,OAAO,kBAAkBC,OAAO,QAAQC,QAAQ,SAChFL,EAAMM,YCsCQC,E,kDApCd,aAAc,IAAD,8BACb,gBAIAZ,aAAe,SAACa,GACf,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAJzC,EAAKC,MAAM,CAACH,YAAY,GAAGrB,OAAO,IAFrB,E,gEASO,IAAD,OAClByB,MAAM,8CACLC,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAChCF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACpB,OAAO6B,S,+BAKnC,IAAD,EAC4BC,KAAKN,MAAzBxB,EADR,EACQA,OAAOqB,EADf,EACeA,YAETU,EAAY/B,EAAOgC,QAAO,SAAAC,GAAQ,OACvCA,EAAMxC,KAAKyC,cAAcC,SAASd,EAAYa,kBAE/C,OAAQlC,EAAOoC,OACX,yBAAKxC,UAAU,MACjB,wBAAIA,UAAU,MAAd,iBACA,kBAAC,EAAD,CAAWU,aAAcwB,KAAKxB,eAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUN,OAAQ+B,MALI,wBAAInC,UAAU,UAAd,e,GAzBPyC,a,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5b7da0c1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card= ({name,email,id}) =>{\r\n\r\n\treturn (\r\n\t\t\r\n\t<div className=\"dib pa3 tc bg-light-green ma3 br4 shadow-4 bw2 grow\" >\r\n\r\n\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\"/>\r\n\r\n\t\t<div >\r\n\t\t\t<h2 >{name}</h2>\r\n\t\t\t<p>{email} </p>\r\n\t\t</div>\r\n\r\n\t</div>\r\n\t\t);\r\n}\r\n export default Card;\r\n","import React from 'react';\r\nimport Card from \"./card\";\r\n\r\n\r\nconst CardList=({robots})=>{\r\n\r\n\treturn  robots.map((card,i)=>{\r\n\t\t\t\t\t\t\t\treturn (<Card key={card.id}\r\n\t\t\t\t\t\t\t\t\t\t id={card.id} \r\n\t\t\t\t\t\t\t\t\t\t name={card.name} \r\n\t\t\t\t\t\t\t\t\t\t email={card.email}/>) })\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({SearchChange})=>{\r\n\treturn (\r\n\t\t<div className=\"pa3\" >\r\n\t\t\t\t<input className=\"pa3 bg-light-green br3 b--lightest-green\" \r\n\t\t\t\t type=\"text\" \r\n\t\t\t\t placeholder=\"Users Robots\"\r\n\t\t\t\t onChange={SearchChange}\r\n\t\t\t\t />\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\r\n\treturn (\r\n<div style={{overflowY: \"scroll\",border:\"1px solid black\",height:\"500px\",padding:\"10px\"}}>\r\n{props.children}\r\n</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/searchBox'\r\nimport './style.css'\r\nimport Scroll from \"../component/Scroll\"\r\n\r\n\r\nclass App extends Component{\r\n\r\n\tconstructor(){\r\n\tsuper();\r\n\tthis.state={searchfield:\"\",robots:[]}\r\n\t}\r\n\r\n\tSearchChange = (event)=>{\r\n \tthis.setState({searchfield:event.target.value})\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t.then(response=>{return response.json();})\r\n\t\t.then(users=>this.setState({robots:users}))\r\n\t}\r\n\r\n\r\nrender()\r\n\t{\r\n\t\tconst {robots,searchfield}=this.state;\r\n\r\n\tconst filterRobot=robots.filter(robot=>{return (\r\n\t\trobot.name.toLowerCase().includes(searchfield.toLowerCase()))})\t\r\n\r\n\treturn !robots.length ? <h1 className=\"tc pa4\">Loading</h1>\r\n\t\t\t: <div className='tc'>\r\n\t\t\t<h1 className='f1'>RobotFriends </h1>\r\n\t\t\t<SearchBox SearchChange={this.SearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t<CardList robots={filterRobot}/>\r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\r\n\t}\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./container/App\";\nimport \"tachyons\"\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n\t\t<App/> ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}